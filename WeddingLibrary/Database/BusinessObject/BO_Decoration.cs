using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using DataAccess;
using DataAccess.Data;
using DataMapping;
using WeddingLibrary.Database.DataObject;

namespace WeddingLibrary.Database.BusinessObject
{
    public class BO_Decoration
    {
        #region This source code was auto-generated by tool,Version=2.0.1004.01

        //------------------------------------------------------------------------------
        // <auto-generated>
        //     Date time = 2/11/2012 5:00:13 PM
        //     This code was generated by tool,Version=2.0.1004.01.
        //     Changes to this code may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------

        #region Condition functions
        ///<summary>
        ///Get conditions by primary key.
        ///</summary>
        public static ParameterCollection GetConditionsByPrimaryKey(string DecorationCode)
        {
            ParameterCollection primaryConditions = new ParameterCollection();
            primaryConditions.AddCondition(ParameterType.Initial, TokenTypes.Equal, DO_Decoration.Columns.DecorationCode, DecorationCode);
            return primaryConditions;
        }

        ///<summary>
        ///Get the tokenType of the column of condition query.
        ///</summary>
        private static TokenTypes GetColumnTokenType(TokenTypes defaultTokenType, DO_Decoration.Columns column, Dictionary<DO_Decoration.Columns, TokenTypes> extTokens)
        {
            if (extTokens != null && extTokens.ContainsKey(column))
                return extTokens[column];
            else
                return defaultTokenType;
        }

        ///<summary>
        ///Get conditions by object with Multi-TokenType.
        ///</summary>
        public static ParameterCollection GetConditionsByObject(DO_Decoration.UO_Decoration parameterObj, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_Decoration.Columns, TokenTypes> extTokens)
        {
            ParameterCollection objectConditions = new ParameterCollection();
            TokenTypes tt = tokenTypes;
            ParameterType pt = isAnd ? ParameterType.And : ParameterType.Or;
            if (!string.IsNullOrEmpty(parameterObj.DecorationCode))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.DecorationCode, extTokens), DO_Decoration.Columns.DecorationCode, parameterObj.DecorationCode);
            }
            if (!string.IsNullOrEmpty(parameterObj.BigDateCode))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.BigDateCode, extTokens), DO_Decoration.Columns.BigDateCode, parameterObj.BigDateCode);
            }
            if (!string.IsNullOrEmpty(parameterObj.DecorationCatCode))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.DecorationCatCode, extTokens), DO_Decoration.Columns.DecorationCatCode, parameterObj.DecorationCatCode);
            }
            if (!string.IsNullOrEmpty(parameterObj.DecorationName))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.DecorationName, extTokens), DO_Decoration.Columns.DecorationName, parameterObj.DecorationName);
            }
            if (parameterObj.DecorationNum != 0 || (extTokens != null && extTokens.ContainsKey(DO_Decoration.Columns.DecorationNum)))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.DecorationNum, extTokens), DO_Decoration.Columns.DecorationNum, parameterObj.DecorationNum);
            }
            if (parameterObj.DecorationLeft != 0 || (extTokens != null && extTokens.ContainsKey(DO_Decoration.Columns.DecorationLeft)))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.DecorationLeft, extTokens), DO_Decoration.Columns.DecorationLeft, parameterObj.DecorationLeft);
            }
            if (parameterObj.DecorationTop != 0 || (extTokens != null && extTokens.ContainsKey(DO_Decoration.Columns.DecorationTop)))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.DecorationTop, extTokens), DO_Decoration.Columns.DecorationTop, parameterObj.DecorationTop);
            }
            if (parameterObj.CreateOn != DateTime.MinValue)
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.CreateOn, extTokens), DO_Decoration.Columns.CreateOn, parameterObj.CreateOn);
            }
            if (!string.IsNullOrEmpty(parameterObj.CreateBy))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.CreateBy, extTokens), DO_Decoration.Columns.CreateBy, parameterObj.CreateBy);
            }
            if (parameterObj.UpdateOn != DateTime.MinValue)
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.UpdateOn, extTokens), DO_Decoration.Columns.UpdateOn, parameterObj.UpdateOn);
            }
            if (!string.IsNullOrEmpty(parameterObj.UpdateBy))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_Decoration.Columns.UpdateBy, extTokens), DO_Decoration.Columns.UpdateBy, parameterObj.UpdateBy);
            }
            return objectConditions;
        }
        #endregion

        #region Query functions

        ///<summary>
        ///Get all records.
        ///</summary>
        public static DO_Decoration.UOList_Decoration GetAllList()
        {
            DO_Decoration da = new DO_Decoration();
            return da.GetAllList();
        }

        ///<summary>
        ///Get all records count.
        ///</summary>
        public static int GetAllRecordsCount()
        {
            DO_Decoration da = new DO_Decoration();
            return da.GetRecordsCount();
        }

        ///<summary>
        ///Get records count.
        ///</summary>
        public static int GetRecordsCount(DO_Decoration.UO_Decoration parameterObj)
        {
            return GetRecordsCount(parameterObj, true, TokenTypes.Equal, null);
        }

        ///<summary>
        ///Get records count.
        ///</summary>
        public static int GetRecordsCount(DO_Decoration.UO_Decoration parameterObj, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_Decoration.Columns, TokenTypes> extTokens)
        {
            DO_Decoration da = new DO_Decoration();
            return da.GetRecordsCount(GetConditionsByObject(parameterObj, isAnd, tokenTypes, extTokens));
        }

        ///<summary>
        ///Get list by object.
        ///</summary>
        public static DO_Decoration.UOList_Decoration GetList(DO_Decoration.UO_Decoration parameterObj, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_Decoration.Columns, TokenTypes> extTokens)
        {
            return parameterObj.GetList(GetConditionsByObject(parameterObj, isAnd, tokenTypes, extTokens));
        }

        ///<summary>
        ///Get list by object.
        ///</summary>
        public static DO_Decoration.UOList_Decoration GetList(DO_Decoration.UO_Decoration parameterObj)
        {
            return GetList(parameterObj, true, TokenTypes.Equal, null);
        }

        ///<summary>
        ///Get object by primary key.
        ///</summary>
        public static DO_Decoration.UO_Decoration GetObject(string DecorationCode)
        {
            DO_Decoration da = new DO_Decoration();
            DO_Decoration.UOList_Decoration l = da.GetList(GetConditionsByPrimaryKey(DecorationCode));
            return l.Count > 0 ? l[0] : null;
        }

        ///<summary>
        ///Get paging list.
        ///</summary>
        public static PagingResult<DO_Decoration.UO_Decoration, DO_Decoration.UOList_Decoration> GetPagingList(DO_Decoration.UO_Decoration parameterObj, int pageNumber, int pageSize, string sortBy, bool isAsc, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_Decoration.Columns, TokenTypes> extTokens)
        {
            return parameterObj.GetPagingList(GetConditionsByObject(parameterObj, isAnd, tokenTypes, extTokens), pageNumber, pageSize, sortBy, isAsc);
        }

        ///<summary>
        ///Get paging list.
        ///</summary>
        public static PagingResult<DO_Decoration.UO_Decoration, DO_Decoration.UOList_Decoration> GetPagingList(DO_Decoration.UO_Decoration parameterObj, int pageNumber, int pageSize, string sortBy, bool isAsc)
        {
            return parameterObj.GetPagingList(GetConditionsByObject(parameterObj, true, TokenTypes.Like, null), pageNumber, pageSize, sortBy, isAsc);
        }
        #endregion

        #region Update functions
        ///<summary>
        ///Update object by primary key.
        ///</summary>
        public static bool UpdateObject(DO_Decoration.UO_Decoration obj, string DecorationCode)
        {
            return obj.Update(GetConditionsByPrimaryKey(DecorationCode)) > 0;
        }

        ///<summary>
        ///Update object by primary key(with transation).
        ///</summary>
        public static bool UpdateObject(DO_Decoration.UO_Decoration obj, string DecorationCode, IDbConnection connection, IDbTransaction transaction)
        {
            return obj.Update(connection, transaction, GetConditionsByPrimaryKey(DecorationCode)) > 0;
        }
        #endregion

        #region Delete functions
        ///<summary>
        ///Delete object by primary key.
        ///</summary>
        public static int Delete(string DecorationCode)
        {
            DO_Decoration da = new DO_Decoration();
            return da.Delete(GetConditionsByPrimaryKey(DecorationCode));
        }

        ///<summary>
        ///Delete object by primary key(with transation).
        ///</summary>
        public static int Delete(string DecorationCode, IDbConnection connection, IDbTransaction transaction)
        {
            DO_Decoration da = new DO_Decoration();
            return da.Delete(connection, transaction, GetConditionsByPrimaryKey(DecorationCode));
        }
        #endregion

        #endregion

        #region User extensions

        #endregion
    }
}
