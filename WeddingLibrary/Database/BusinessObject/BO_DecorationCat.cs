using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using DataAccess;
using DataAccess.Data;
using DataMapping;
using WeddingLibrary.Database.DataObject;

namespace WeddingLibrary.Database.BusinessObject
{
    public class BO_DecorationCat
    {
        #region This source code was auto-generated by tool,Version=2.0.1004.01

        //------------------------------------------------------------------------------
        // <auto-generated>
        //     Date time = 2/11/2012 5:00:55 PM
        //     This code was generated by tool,Version=2.0.1004.01.
        //     Changes to this code may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------

        #region Condition functions

        ///<summary>
        ///Get the tokenType of the column of condition query.
        ///</summary>
        private static TokenTypes GetColumnTokenType(TokenTypes defaultTokenType, DO_DecorationCat.Columns column, Dictionary<DO_DecorationCat.Columns, TokenTypes> extTokens)
        {
            if (extTokens != null && extTokens.ContainsKey(column))
                return extTokens[column];
            else
                return defaultTokenType;
        }

        ///<summary>
        ///Get conditions by object with Multi-TokenType.
        ///</summary>
        public static ParameterCollection GetConditionsByObject(DO_DecorationCat.UO_DecorationCat parameterObj, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_DecorationCat.Columns, TokenTypes> extTokens)
        {
            ParameterCollection objectConditions = new ParameterCollection();
            TokenTypes tt = tokenTypes;
            ParameterType pt = isAnd ? ParameterType.And : ParameterType.Or;
            if (!string.IsNullOrEmpty(parameterObj.DecorationCatName))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_DecorationCat.Columns.DecorationCatName, extTokens), DO_DecorationCat.Columns.DecorationCatName, parameterObj.DecorationCatName);
            }
            if (!string.IsNullOrEmpty(parameterObj.DecorationCatCode))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_DecorationCat.Columns.DecorationCatCode, extTokens), DO_DecorationCat.Columns.DecorationCatCode, parameterObj.DecorationCatCode);
            }
            if (parameterObj.DecorationCatType != 0 || (extTokens != null && extTokens.ContainsKey(DO_DecorationCat.Columns.DecorationCatType)))
            {
                objectConditions.AddCondition(pt, GetColumnTokenType(tt, DO_DecorationCat.Columns.DecorationCatType, extTokens), DO_DecorationCat.Columns.DecorationCatType, parameterObj.DecorationCatType);
            }
            return objectConditions;
        }
        #endregion

        #region Query functions

        ///<summary>
        ///Get all records.
        ///</summary>
        public static DO_DecorationCat.UOList_DecorationCat GetAllList()
        {
            DO_DecorationCat da = new DO_DecorationCat();
            return da.GetAllList();
        }

        ///<summary>
        ///Get all records count.
        ///</summary>
        public static int GetAllRecordsCount()
        {
            DO_DecorationCat da = new DO_DecorationCat();
            return da.GetRecordsCount();
        }

        ///<summary>
        ///Get records count.
        ///</summary>
        public static int GetRecordsCount(DO_DecorationCat.UO_DecorationCat parameterObj)
        {
            return GetRecordsCount(parameterObj, true, TokenTypes.Equal, null);
        }

        ///<summary>
        ///Get records count.
        ///</summary>
        public static int GetRecordsCount(DO_DecorationCat.UO_DecorationCat parameterObj, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_DecorationCat.Columns, TokenTypes> extTokens)
        {
            DO_DecorationCat da = new DO_DecorationCat();
            return da.GetRecordsCount(GetConditionsByObject(parameterObj, isAnd, tokenTypes, extTokens));
        }

        ///<summary>
        ///Get list by object.
        ///</summary>
        public static DO_DecorationCat.UOList_DecorationCat GetList(DO_DecorationCat.UO_DecorationCat parameterObj, bool isAnd, TokenTypes tokenTypes, Dictionary<DO_DecorationCat.Columns, TokenTypes> extTokens)
        {
            return parameterObj.GetList(GetConditionsByObject(parameterObj, isAnd, tokenTypes, extTokens));
        }

        ///<summary>
        ///Get list by object.
        ///</summary>
        public static DO_DecorationCat.UOList_DecorationCat GetList(DO_DecorationCat.UO_DecorationCat parameterObj)
        {
            return GetList(parameterObj, true, TokenTypes.Equal, null);
        }
        #endregion
        #endregion

        #region User extensions

        #endregion
    }
}
